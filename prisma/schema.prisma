// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserPermissionRole {
  USER
  ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          UserPermissionRole      @default(USER)
    timeCards     TimeCard[]
    timeLogs      TimeLog[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Project {
    id            Int     @id @default(autoincrement())
    name          String
    externalId    String?
    tasks         Task[]
    timeLogs      TimeLog[]
}

model Task {
    id            Int      @id @default(autoincrement())
    name          String
    externalId    String?
    project       Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId     Int?
    timeLogs      TimeLog[]
}

model TimeCard {
    id            Int        @id @default(autoincrement())
    user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String?
    start         DateTime   @db.Date
    end           DateTime   @db.Date
    duration      Int?
}

model TimeLog {
    id            Int        @id @default(autoincrement())
    user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String?
    start         DateTime   @db.Date
    end           DateTime   @db.Date
    duration      Int?
    description   String?
    billable      Boolean    @default(false)
    project       Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId     Int?
    task          Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId        Int?
}